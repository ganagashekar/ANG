# -*- coding: utf-8 -*-
"""Untitled84.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rV0-jhaHb6oruTPjbEp7wjKln_mGOC8B
"""

import pandas as pd

# Load files
mapping_df = pd.read_excel("Mapping-org.xlsx")
source_df = pd.read_excel("Source-ORG.xlsx", header=10)

# Clean column names in source
source_df.columns = source_df.columns.str.strip().str.replace('\xa0', ' ', regex=False)

# Confirm column exists
assert "Critical Business Element" in source_df.columns, "Column not found after cleaning"

# Merge source with mapping on CBE
merged_df = pd.merge(
    source_df,
    mapping_df,
    how="left",
    left_on="Critical Business Element",
    right_on="CBE_Name"
)

# Update relevant columns with mapping values
merged_df["Document Name/Page Number"] = merged_df["SOT Reference"]
merged_df["Correct Value of Source"] = merged_df["SOT Value"]
merged_df["Value on Client WorkSheet"] = merged_df["SOR Value"]

# Optional: Drop extra columns
merged_df.drop(columns=["CBE_Name", "SOT Reference", "SOT Value", "SOR Value", "SOR Reference", "Seleted"], inplace=True, errors="ignore")

# Save to Excel
merged_df.to_excel("Updated_Source.xlsx", index=False)
print("✅ Merged and updated file saved as Updated_Source.xlsx")

import pandas as pd
from openpyxl import load_workbook

# File paths
source_path = "Source-ORG.xlsx"
mapping_path = "Mapping-org.xlsx"
output_path = "Updated_Source_Preserved_Format.xlsx"

# Load source workbook and active sheet
wb = load_workbook(filename=source_path)
ws = wb.active

# Load mapping DataFrame
mapping_df = pd.read_excel(mapping_path)
mapping_df['CBE_Name'] = mapping_df['CBE_Name'].astype(str).str.strip()

# Column mapping (from screenshot)
col_map = {
    'CBE': 'C',  # Critical Business Element
    'DOC_PAGE': 'E',  # Document Name/Page Number
    'CORRECT_SRC': 'F',  # Correct Value of Source
    'CLIENT_VAL': 'G',  # Value on Client WorkSheet
}

# Excel row where table starts
start_row = 12

# Loop through rows and update values if match found
for row in range(start_row, ws.max_row + 1):
    cbe_cell = f"{col_map['CBE']}{row}"
    cbe_value = ws[cbe_cell].value
    if cbe_value:
        cbe_value_clean = str(cbe_value).strip()
        match = mapping_df[mapping_df["CBE_Name"] == cbe_value_clean]
        if not match.empty:
            ws[f"{col_map['DOC_PAGE']}{row}"] = match["SOT Reference"].values[0]
            ws[f"{col_map['CORRECT_SRC']}{row}"] = match["SOT Value"].values[0]
            ws[f"{col_map['CLIENT_VAL']}{row}"] = match["SOR Value"].values[0]

# Save to new file (preserves formatting)
wb.save(output_path)
print("✅ Saved:", output_path)

import pandas as pd
from openpyxl import load_workbook
from openpyxl.utils import get_column_letter

# Define file paths
source_path = "Source-ORG.xlsx"
mapping_path = "Mapping-org.xlsx"
output_path = "Updated_Source_Preserved_Format.xlsx"

# Load mapping DataFrame
mapping_df = pd.read_excel(mapping_path)
mapping_df['CBE_Name'] = mapping_df['CBE_Name'].astype(str).str.strip()

# Load source workbook and worksheet
wb = load_workbook(filename=source_path)
ws = wb.active

# Step 1: Detect header row by looking for known header names
target_columns = [
    "Critical Business Element",
    "Document Name/Page Number",
    "Correct Value of Source",
    "Value on Client  WorkSheet"
]

header_row = None
for row in ws.iter_rows(min_row=1, max_row=50):
    headers = [str(cell.value).strip() if cell.value else "" for cell in row]
    if all(any(target.lower() in col.lower() for col in headers) for target in target_columns):
        header_row = row[0].row
        header_names = headers
        break

if not header_row:
    raise ValueError("Header row with required columns not found!")

# Step 2: Map column names to Excel column letters
col_indices = {name: idx for idx, name in enumerate(header_names)}
get_col = lambda name: get_column_letter(col_indices[name] + 1)

# Step 3: Get actual column letters
cbe_col = get_col("Critical Business Element")
doc_col = get_col("Document Name/Page Number")
correct_col = get_col("Correct Value of Source")
client_col = get_col("Value on Client  WorkSheet")  # watch for space formatting

# Step 4: Loop through data rows and update values
for row in range(header_row + 1, ws.max_row + 1):
    cbe_value = ws[f"{cbe_col}{row}"].value
    if cbe_value:
        cbe_value_clean = str(cbe_value).strip()
        match = mapping_df[mapping_df["CBE_Name"] == cbe_value_clean]
        if not match.empty:
            ws[f"{doc_col}{row}"] = match["SOT Reference"].values[0]
            ws[f"{correct_col}{row}"] = match["SOT Value"].values[0]
            ws[f"{client_col}{row}"] = match["SOR Value"].values[0]

# Save without affecting formatting
wb.save(output_path)
print(f"✅ Updated file saved as {output_path}")

import pandas as pd
from openpyxl import load_workbook
from openpyxl.utils import get_column_letter
import re

# File paths
source_path = "Source-ORG.xlsx"
mapping_path = "Mapping-org.xlsx"
output_path = "Updated_Source_Preserved_Format.xlsx"

# Load mapping
mapping_df = pd.read_excel(mapping_path)
mapping_df['CBE_Name'] = mapping_df['CBE_Name'].astype(str).str.strip()

# Load source workbook
wb = load_workbook(filename=source_path)
ws = wb.active

# Target headers we want to find (in fuzzy way)
target_headers = {
    "cbe": "Critical Business Element",
    "doc": "Document Name/Page Number",
    "correct": "Correct Value of Source",
    "client": "Value on Client  WorkSheet"  # original name had special space
}

def normalize(text):
    if text is None:
        return ""
    return re.sub(r'\s+', ' ', str(text).replace('\xa0', ' ')).strip().lower()

# Step 1: Find header row
header_row = None
col_map = {}
for row in ws.iter_rows(min_row=1, max_row=50):
    normalized_headers = [normalize(cell.value) for cell in row]
    for key, expected in target_headers.items():
        for idx, header in enumerate(normalized_headers):
            if normalize(expected) in header:
                col_map[key] = get_column_letter(idx + 1)
    if len(col_map) == len(target_headers):
        header_row = row[0].row
        break

if not header_row:
    raise ValueError("❌ Could not find header row with required columns.")

# Step 2: Update data rows
for row in range(header_row + 1, ws.max_row + 1):
    cbe_cell = f"{col_map['cbe']}{row}"
    cbe_value = ws[cbe_cell].value
    if cbe_value:
        cbe_value_clean = str(cbe_value).strip()
        match = mapping_df[mapping_df["CBE_Name"] == cbe_value_clean]
        if not match.empty:
            ws[f"{col_map['doc']}{row}"] = match["SOT Reference"].values[0]
            ws[f"{col_map['correct']}{row}"] = match["SOT Value"].values[0]
            ws[f"{col_map['client']}{row}"] = match["SOR Value"].values[0]

# Save without changing formatting
wb.save(output_path)
print(f"✅ Updated file saved as: {output_path}")

import pandas as pd
from openpyxl import load_workbook
from openpyxl.utils import get_column_letter
import re

# -------------------------
# File Paths
# -------------------------
source_path = "Source-ORG.xlsx"
mapping_path = "Mapping-org.xlsx"
output_path = "Updated_Source_Preserved_Format.xlsx"

# -------------------------
# Load Mapping
# -------------------------
mapping_df = pd.read_excel(mapping_path)
mapping_df['CBE_Name'] = mapping_df['CBE_Name'].astype(str).str.strip()

# -------------------------
# Load Workbook & Sheet
# -------------------------
wb = load_workbook(filename=source_path)
ws = wb.active

# -------------------------
# Define Headers to Locate (Fuzzy)
# -------------------------
target_headers = {
    "cbe": "Critical Business Element",
    "doc": "Document Name/Page Number",
    "correct": "Correct Value of Source",
    "client": "Value on Client  WorkSheet"  # original has non-breaking space
}

def normalize(text):
    if text is None:
        return ""
    return re.sub(r'\s+', ' ', str(text).replace('\xa0', ' ')).strip().lower()

# -------------------------
# Step 1: Find Header Row Dynamically
# -------------------------
header_row = None
col_map = {}

for row in ws.iter_rows(min_row=1, max_row=50):
    normalized_headers = [normalize(cell.value) for cell in row]
    for key, expected in target_headers.items():
        for idx, header in enumerate(normalized_headers):
            if normalize(expected) in header:
                col_map[key] = get_column_letter(idx + 1)
    if len(col_map) == len(target_headers):
        header_row = row[0].row
        break

if not header_row:
    raise ValueError("❌ Could not find header row with required columns.")

# -------------------------
# Step 2: Apply Mapping Updates (CBE Matches)
# -------------------------
for row in range(header_row + 1, ws.max_row + 1):
    cbe_cell = f"{col_map['cbe']}{row}"
    cbe_value = ws[cbe_cell].value
    if cbe_value:
        cbe_value_clean = str(cbe_value).strip()
        match = mapping_df[mapping_df["CBE_Name"] == cbe_value_clean]
        if not match.empty:
            ws[f"{col_map['doc']}{row}"] = match["SOT Reference"].values[0]
            ws[f"{col_map['correct']}{row}"] = match["SOT Value"].values[0]
            ws[f"{col_map['client']}{row}"] = match["SOR Value"].values[0]

# -------------------------
# Step 3: Inject Parameter Values (I&P Section)
# -------------------------
# You can extend this dictionary with any additional pairs
param_values = {
    "OneviewId": 1,
    "matchedNumebr": 2,
    "Test Number": 3,
    "Card Number": 7849,
    "Data Number": 4528,
    "PIN": 149,
    "TEST123": 1489,
    "I&P": "shekar"
}

# These control the "I&P" key-value structure
label_col = "C"
value_col = "H"
start_row = 2

for row in range(start_row, ws.max_row + 1):
    label = ws[f"{label_col}{row}"].value
    if label:
        key = str(label).strip()
        if key in param_values:
            ws[f"{value_col}{row}"] = param_values[key]

# -------------------------
# Save the Final Output
# -------------------------
wb.save(output_path)
print(f"✅ Excel updated and saved as: {output_path}")

import pandas as pd
from openpyxl import load_workbook
from openpyxl.utils import get_column_letter
import re

# -------------------------
# File Paths
# -------------------------
source_path = "Source-ORG.xlsx"
mapping_path = "Mapping-org.xlsx"
output_path = "Updated_Source_Preserved_Format.xlsx"

# -------------------------
# Load Mapping File
# -------------------------
mapping_df = pd.read_excel(mapping_path)
mapping_df['CBE_Name'] = mapping_df['CBE_Name'].astype(str).str.strip()

# -------------------------
# Load Workbook & Sheet
# -------------------------
wb = load_workbook(filename=source_path)
ws = wb.active

# -------------------------
# Fuzzy Matching Headers
# -------------------------
target_headers = {
    "cbe": "Critical Business Element",
    "doc": "Document Name/Page Number",
    "correct": "Correct Value of Source",
    "client": "Value on Client  WorkSheet"  # includes non-breaking space
}

def normalize(text):
    if text is None:
        return ""
    return re.sub(r'\s+', ' ', str(text).replace('\xa0', ' ')).strip().lower()

# -------------------------
# Step 1: Find Header Row
# -------------------------
header_row = None
col_map = {}

for row in ws.iter_rows(min_row=1, max_row=50):
    normalized_headers = [normalize(cell.value) for cell in row]
    for key, expected in target_headers.items():
        for idx, header in enumerate(normalized_headers):
            if normalize(expected) in header:
                col_map[key] = get_column_letter(idx + 1)
    if len(col_map) == len(target_headers):
        header_row = row[0].row
        break

if not header_row:
    raise ValueError("❌ Could not find header row with required columns.")

# -------------------------
# Step 2: Apply Mapping Updates
# -------------------------
for row in range(header_row + 1, ws.max_row + 1):
    cbe_cell = f"{col_map['cbe']}{row}"
    cbe_value = ws[cbe_cell].value
    if cbe_value:
        cbe_value_clean = str(cbe_value).strip()
        match = mapping_df[mapping_df["CBE_Name"] == cbe_value_clean]
        if not match.empty:
            ws[f"{col_map['doc']}{row}"] = match["SOT Reference"].values[0]
            ws[f"{col_map['correct']}{row}"] = match["SOT Value"].values[0]
            ws[f"{col_map['client']}{row}"] = match["SOR Value"].values[0]

# -------------------------
# Step 3: Inject Additional Param Values (Left & Right Blocks)
# -------------------------
param_values = {
    "OneviewId": 1,
    "matchedNumebr": 2,
    "Test Number": 3,
    "Card Number": 7849,
    "Data Number": 4528,
    "PIN": 149,
    "TEST123": 1489,
    "I&P": "shekar"
}

# Left block: Column C → D, Right block: Column G → H
for row in range(2, ws.max_row + 1):
    # Left block
    left_label = ws[f"C{row}"].value
    if left_label:
        key = str(left_label).strip()
        if key in param_values:
            ws[f"D{row}"] = param_values[key]

    # Right block
    right_label = ws[f"G{row}"].value
    if right_label:
        key = str(right_label).strip()
        if key in param_values:
            ws[f"H{row}"] = param_values[key]

# -------------------------
# Step 4: Save Final Output
# -------------------------
wb.save(output_path)
print(f"✅ Excel updated and saved as: {output_path}")