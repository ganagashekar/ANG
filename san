using System;
using System.Linq;
using System.Reflection;
using System.Web; // For HttpUtility.HtmlEncode (part of .NET Framework)
using System.Web.Http;
using System.Web.Http.Controllers;
using System.Web.Http.ModelBinding;
using System.Web.Http.ModelBinding.Binders;
using System.Net.Http.Formatting; // For JsonMediaTypeFormatter

namespace XssSanitization
{
    /// <summary>
    /// Attribute to mark string properties that should have XSS (Cross-Site Scripting)
    /// strings removed or sanitized when processed.
    /// </summary>
    [AttributeUsage(AttributeTargets.Property, Inherited = true, AllowMultiple = false)]
    public class SanitizeXssAttribute : Attribute
    {
        // This attribute primarily acts as a marker.
        // The sanitization logic is applied by a separate processor (e.g., a Custom Model Binder).
    }

    /// <summary>
    /// Provides utility methods for XSS sanitization.
    /// </summary>
    public static class XssSanitizer
    {
        /// <summary>
        /// A basic XSS sanitization function using HttpUtility.HtmlEncode.
        /// In a real-world application, consider using a robust library like
        /// OWASP ESAPI or a dedicated HTML sanitization library (e.g., AntiXSS Library)
        /// for more comprehensive protection, especially if you need to allow a safe subset of HTML.
        /// HttpUtility.HtmlEncode escapes HTML characters, effectively preventing most XSS attacks
        /// by rendering scripts as text.
        /// </summary>
        /// <param name="input">The string to sanitize.</param>
        /// <returns>The sanitized string.</returns>
        private static string SanitizeString(string input)
        {
            if (string.IsNullOrEmpty(input))
            {
                return input;
            }

            // HttpUtility.HtmlEncode is commonly used in .NET Framework applications.
            return HttpUtility.HtmlEncode(input);
        }

        /// <summary>
        /// Iterates through properties of an object marked with <see cref="SanitizeXssAttribute"/>
        /// and applies XSS sanitization to their string values.
        /// </summary>
        /// <param name="obj">The object instance whose properties need sanitization.</param>
        public static void SanitizeProperties(object obj)
        {
            if (obj == null)
            {
                return;
            }

            // Get all public instance properties of the object's type
            PropertyInfo[] properties = obj.GetType().GetProperties(BindingFlags.Public | BindingFlags.Instance);

            foreach (PropertyInfo property in properties)
            {
                // Check if the property is a string, can be read/written, and has the SanitizeXssAttribute
                if (property.PropertyType == typeof(string) &&
                    property.CanRead && property.CanWrite &&
                    property.IsDefined(typeof(SanitizeXssAttribute), true))
                {
                    // Get the current value of the property
                    string originalValue = property.GetValue(obj) as string;

                    if (originalValue != null)
                    {
                        // Sanitize the value
                        string sanitizedValue = SanitizeString(originalValue);

                        // Set the sanitized value back to the property
                        property.SetValue(obj, sanitizedValue);
                    }
                }
            }
        }
    }

    /// <summary>
    /// A custom model binder for ASP.NET Web API that sanitizes properties
    /// marked with <see cref="SanitizeXssAttribute"/> after the default model binding has occurred.
    /// </summary>
    public class SanitizingModelBinder : IModelBinder
    {
        private readonly IModelBinder _fallbackBinder;

        /// <summary>
        /// Initializes a new instance of the <see cref="SanitizingModelBinder"/> class.
        /// </summary>
        /// <param name="fallbackBinder">The default model binder to use for initial binding.</param>
        public SanitizingModelBinder(IModelBinder fallbackBinder)
        {
            _fallbackBinder = fallbackBinder ?? throw new ArgumentNullException(nameof(fallbackBinder));
        }

        /// <summary>
        /// Attempts to bind a model for the current request.
        /// </summary>
        /// <param name="actionContext">The context for the action.</param>
        /// <param name="bindingContext">The model binding context.</param>
        /// <returns>True if the model was successfully bound; otherwise, false.</returns>
        public bool BindModel(HttpActionContext actionContext, ModelBindingContext bindingContext)
        {
            if (actionContext == null)
            {
                throw new ArgumentNullException(nameof(actionContext));
            }
            if (bindingContext == null)
            {
                throw new ArgumentNullException(nameof(bindingContext));
            }

            // First, let the default model binder do its job.
            // This will populate the model instance from the request body.
            bool isBound = _fallbackBinder.BindModel(actionContext, bindingContext);

            // If the model was successfully bound and is not null, proceed with sanitization.
            if (isBound && bindingContext.Model != null)
            {
                try
                {
                    // Apply XSS sanitization to properties of the bound model.
                    XssSanitizer.SanitizeProperties(bindingContext.Model);
                }
                catch (Exception ex)
                {
                    // Log the exception if sanitization fails.
                    Console.WriteLine($"Error during XSS sanitization for model {bindingContext.Model.GetType().Name}: {ex.Message}");
                    // In Web API, you might add a model state error or re-throw if critical.
                    // bindingContext.ModelState.AddModelError(bindingContext.ModelName, "Error during sanitization.");
                }
            }

            return isBound;
        }
    }

    /// <summary>
    /// A model binder provider for ASP.NET Web API that supplies the <see cref="SanitizingModelBinder"/>
    /// for types that contain properties marked with <see cref="SanitizeXssAttribute"/>.
    /// </summary>
    public class SanitizingModelBinderProvider : ModelBinderProvider
    {
        /// <summary>
        /// Gets a model binder for the given model type.
        /// </summary>
        /// <param name="configuration">The HTTP configuration.</param>
        /// <param name="modelType">The type of the model to bind.</param>
        /// <returns>An <see cref="IModelBinder"/> instance or null if no binder can be provided.</returns>
        public override IModelBinder GetBinder(HttpConfiguration configuration, Type modelType)
        {
            if (configuration == null)
            {
                throw new ArgumentNullException(nameof(configuration));
            }
            if (modelType == null)
            {
                throw new ArgumentNullException(nameof(modelType));
            }

            // Check if the model type has any properties marked with SanitizeXssAttribute.
            // We only want to apply our custom binder if there's something to sanitize.
            bool hasSanitizeXssProperties = modelType
                .GetProperties(BindingFlags.Public | BindingFlags.Instance)
                .Any(p => p.PropertyType == typeof(string) && p.IsDefined(typeof(SanitizeXssAttribute), true));

            if (!hasSanitizeXssProperties)
            {
                return null; // No properties to sanitize, let other providers handle it.
            }

            // Get the default JsonMediaTypeFormatter's model binder.
            // This is typically what handles [FromBody] for JSON.
            // You might need to adjust this if you're using other formatters (e.g., Xml).
            var jsonFormatter = configuration.Formatters.OfType<JsonMediaTypeFormatter>().FirstOrDefault();

            if (jsonFormatter == null)
            {
                return null; // No JSON formatter found, so we can't proceed.
            }

            // Get the default binder for the current model type from the JSON formatter.
            // This is equivalent to the fallback binder in ASP.NET Core.
            IModelBinder fallbackBinder = new FormatterModelBinder(jsonFormatter, false); // 'false' for optional param

            if (fallbackBinder == null)
            {
                return null; // No default binder found, so we can't proceed.
            }

            // Return our custom binder, wrapping the fallback binder.
            return new SanitizingModelBinder(fallbackBinder);
        }
    }

    // --- Example Usage in an ASP.NET Web API Application ---

    // This would typically be in a separate file (e.g., UserInputModel.cs)
    public class UserInputModel
    {
        [SanitizeXss]
        public string Comment { get; set; }

        [SanitizeXss]
        public string UserName { get; set; }

        public string Email { get; set; } // This property will not be sanitized

        [SanitizeXss]
        public string Bio { get; set; }
    }

    // This would typically be in a separate file (e.g., DataController.cs)
    // and part of an ASP.NET Web API project.
    public class DataController : ApiController
    {
        [HttpPost]
        [Route("api/data/submit")] // Example route
        public IHttpActionResult SubmitData([FromBody] UserInputModel model)
        {
            // At this point, the SanitizingModelBinder has already run,
            // and properties marked with [SanitizeXss] in 'model' should be sanitized.

            Console.WriteLine($"Received Sanitized Comment: {model.Comment}");
            Console.WriteLine($"Received Sanitized UserName: {model.UserName}");
            Console.WriteLine($"Received Email (not sanitized): {model.Email}");
            Console.WriteLine($"Received Sanitized Bio: {model.Bio}");

            // You can return the sanitized model or process it further
            return Ok(new { message = "Data received and sanitized.", sanitizedModel = model });
        }
    }

    // --- Global.asax.cs or App_Start/WebApiConfig.cs ---
    // This is where you would register the model binder provider.
    // In a typical ASP.NET Web API project, this code goes into App_Start/WebApiConfig.cs
    // within the Register method, or directly into Global.asax.cs Application_Start.

    /*
    // Example of WebApiConfig.cs
    public static class WebApiConfig
    {
        public static void Register(HttpConfiguration config)
        {
            // Web API routes
            config.MapHttpAttributeRoutes();

            config.Routes.MapHttpRoute(
                name: "DefaultApi",
                routeTemplate: "api/{controller}/{id}",
                defaults: new { id = RouteParameter.Optional }
            );

            // Register the custom model binder provider
            // Insert it at the beginning of the collection to ensure it's checked first.
            config.Services.Insert(typeof(ModelBinderProvider), 0, new SanitizingModelBinderProvider());

            // Optional: Remove default body model binder if you want to ensure only your custom binder handles it
            // config.Services.RemoveAll(typeof(ModelBinderProvider),
            //     p => p is BodyModelBinderProvider);
        }
    }

    // Example of Global.asax.cs Application_Start
    public class WebApiApplication : System.Web.HttpApplication
    {
        protected void Application_Start()
        {
            AreaRegistration.RegisterAllAreas();
            GlobalConfiguration.Configure(WebApiConfig.Register);
            FilterConfig.RegisterGlobalFilters(GlobalFilters.Filters);
            RouteConfig.RegisterRoutes(RouteTable.Routes);
            BundleConfig.RegisterBundles(BundleTable.Bundles);
        }
    }
    */
}
