using System;
using System.Linq;
using System.Net.Http;
using System.Reflection;
using System.Web;
using System.Web.Http;
using System.Web.Http.Controllers;
using System.Web.Http.Filters;

namespace WebApiXSSSanitizer
{
    // Property-level attribute
    [AttributeUsage(AttributeTargets.Property)]
    public class SanitizeXSSAttribute : Attribute
    {
    }

    // Action filter that sanitizes properties marked with [SanitizeXSS]
    public class SanitizeXSSPropertiesFilter : ActionFilterAttribute
    {
        public override void OnActionExecuting(HttpActionContext actionContext)
        {
            foreach (var argument in actionContext.ActionArguments.Values)
            {
                if (argument == null) continue;

                var props = argument.GetType().GetProperties(BindingFlags.Public | BindingFlags.Instance);

                foreach (var prop in props)
                {
                    if (prop.PropertyType != typeof(string) || !prop.CanRead || !prop.CanWrite)
                        continue;

                    var attr = prop.GetCustomAttribute<SanitizeXSSAttribute>();
                    if (attr == null) continue;

                    var value = (string)prop.GetValue(argument);
                    if (!string.IsNullOrWhiteSpace(value))
                    {
                        var sanitized = HttpUtility.HtmlEncode(value.Trim());
                        prop.SetValue(argument, sanitized);
                    }
                }
            }

            base.OnActionExecuting(actionContext);
        }
    }

    // Sample input model
    public class CommentModel
    {
        [SanitizeXSS]
        public string Name { get; set; }

        [SanitizeXSS]
        public string Message { get; set; }

        public string RawValue { get; set; } // Will NOT be sanitized
    }

    // Sample API controller
    [SanitizeXSSPropertiesFilter] // Apply globally to this controller
    public class CommentsController : ApiController
    {
        [HttpPost]
        [Route("api/comments")]
        public IHttpActionResult PostComment(CommentModel model)
        {
            // Only Name and Message will be sanitized
            return Ok(new
            {
                SanitizedName = model.Name,
                SanitizedMessage = model.Message,
                Raw = model.RawValue
            });
        }
    }
}
