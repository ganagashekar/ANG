using System.Text.RegularExpressions;

public static class XssSanitizer
{
    public static string Sanitize(string input)
    {
        if (string.IsNullOrEmpty(input))
            return input;
        // Remove HTML tags (basic)
        return Regex.Replace(input, "<.*?>", string.Empty);
    }
}

using System;
using System.Linq;
using System.Reflection;
using System.Threading.Tasks;
using System.Web.Http.Controllers;
using System.Web.Http.ModelBinding;

public class SanitizeXssModelBinder : IModelBinder
{
    public bool BindModel(HttpActionContext actionContext, ModelBindingContext bindingContext)
    {
        var modelType = bindingContext.ModelType;
        var model = Activator.CreateInstance(modelType);

        foreach (var property in modelType.GetProperties(BindingFlags.Public | BindingFlags.Instance))
        {
            if (!property.CanWrite)
                continue;

            var valueProviderResult = bindingContext.ValueProvider.GetValue(property.Name);
            if (valueProviderResult != null)
            {
                object value = valueProviderResult.AttemptedValue;
                if (property.PropertyType == typeof(string) && value is string strValue)
                {
                    value = XssSanitizer.Sanitize(strValue);
                }
                else if (value != null)
                {
                    value = Convert.ChangeType(value, property.PropertyType);
                }
                property.SetValue(model, value);
            }
        }

        bindingContext.Model = model;
        return true;
    }
}

using System.Web.Http.ModelBinding;

[ModelBinder(typeof(SanitizeXssModelBinder))]
public class Equities
{
    // Your properties here
}

using System.Web.Http;
using System.Web.Http.ModelBinding;

public static class WebApiConfig
{
    public static void Register(HttpConfiguration config)
    {
        // Other config...

        var provider = new SimpleModelBinderProvider(typeof(Equities), new SanitizeXssModelBinder());
        config.Services.Insert(typeof(ModelBinderProvider), 0, provider);
    }
}
